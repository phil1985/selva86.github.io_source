gg1 <- gg + geom_point(aes(color=color))
gg2 <- gg1 + labs(title="Plot Title", x="X-Axis", y="Y-Axis")
print(gg2)
print(gg2)
gg2 + theme(text=element_text(color="blue"))
gg3 <- gg2 + theme(plot.title=element_text(size=25), axis.title.x=element_text(size=20), axis.title.y=element_text(size=20), axis.text.x=element_text(size=15), axis.text.y=element_text(size=15))
print(gg3)
gg3 + labs(title="Plot Title\nSecond Line of Plot Title") + theme(plot.title=element_text(face="bold", color="steelblue", lineheight=1.2))
gg3 + coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) + geom_smooth()  # zoom in
gg3 + xlim(c(0,3)) + ylim(c(0, 5000)) + geom_smooth()  # deletes the points
gg3 + scale_x_continuous(limits=c(0,3)) + scale_y_continuous(limits=c(0, 5000))  # deletes the points outside limits
gg3 + scale_x_continuous(labels=c("zero", "one", "two", "three", "four", "five"))  # if X is a factor
gg3 + scale_x_continuous(labels=c("zero", "one", "two", "three", "four", "five")) + scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor
gg3 + theme(axis.text.x=element_text(angle=45), axis.text.y=element_text(angle=45))
gg3 + coord_flip()  # flips X and Y axis.
gg3 + theme(legend.postion="none")
gg3 + theme(legend.position="none")
gg3 + scale_color_discrete(name="Cut of diamonds")
gg3 + coord_flip()  # flips X and Y axis.
gg3 + scale_color_discrete(name="Diamonds")  # Change legend title
scale_colour_manual(name='', values=c('Important line'='grey', 'Point values'='red'))
scale_colour_manual(name='', values=c('Important line'='grey', 'Point values'='red'))
gg3 + scale_colour_manual(name='', values=c('Important line'='grey', 'Point values'='red'))
gg3 + scale_colour_manual(name='', values=c('Important line'='grey', 'Point values'='red'))
gg3 + scale_color_discrete(name="Diamonds")  # Change legend title
gg3 + scale_colour_manual(name='Diamond', values=c(LETTERS[4:10]))
gg3 + scale_colour_discrete(name='Diamond', values=c(LETTERS[4:10]))
gg3 + scale_colour_discrete(name='Diamond', values=c(LETTERS[4:10]))
```
gg3 + scale_colour_manual(name='Diamond')
gg3 + scale_color_discrete(name="Diamonds")  # Change legend title
gg3 + scale_color_discrete(name="")  # Change legend title
gg3 + scale_colour_manual(name='', values=c('D'='grey', 'E'='red', 'D'='grey', 'E'='red', 'D'='grey', 'E'='red', 'D'='grey'))
gg3 + scale_colour_manual(name='', values=c('D'='grey', 'E'='red', 'F'='grey', 'R'='red', 'D'='grey', 'E'='red', 'D'='grey'))
gg3 + scale_colour_manual(name='', values=c('D'='grey', 'E'='red', 'F'='grey', 'G'='red', 'H'='grey', 'I'='red', 'J'='grey'))
gg3 + scale_colour_manual(name='', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='red', 'H'='grey', 'I'='red', 'J'='grey'))
gg3 + scale_colour_manual(name='', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='grey1'))
gg3 + scale_colour_manual(name='', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
gg3 + scale_colour_manual(name='', values=c('DE'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
gg3 + scale_colour_manual(name='', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
gg3 + scale_colour_manual(name='bah', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
gg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
gg3 + theme(legend.postion="top")  # top / bottom / left / right
gg3 + theme(legend.position="top")  # top / bottom / left / right
gg3 + theme(legend.title = element_text(size=20), legend.text = element_text(size=15))
gg3 + theme(legend.key=element_rect(fill='steelblue'))
gg3 + theme(legend.title = element_text(size=20), legend.text = element_text(size=15)) + theme(legend.key=element_rect(fill='steelblue'))
gg3 <- gg2 + theme(plot.title=element_text(size=25), axis.title.x=element_text(size=20), axis.title.y=element_text(size=20), axis.text.x=element_text(size=15), axis.text.y=element_text(size=15))
print(gg3)
gg3 + theme(legend.title = element_text(size=20), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue'))
gg3 + theme(legend.title = element_text(size=20), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue'))
gg3 + theme(legend.title = element_text(size=20, color = "red"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue'))
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue'))
gg3 + guides(colour = guide_legend(override.aes = list(size=4)))
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=4)))
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=4, shape=2)))
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=4, shape=1)))
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=4, shape=4)))
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=4, shape=4, stroke=2)))
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=2, shape=4, stroke=2)))
gg3 + geom_text(aes(label=round(color), size=3)
)
gg3 + geom_text(aes(label=labelCol, size=3))
gg3 + geom_text(aes(label=color, size=3))
gg3 + geom_text(aes(label=color, size=1))
gg3 + geom_text(aes(label=color) size=1)
gg3 + geom_text(aes(label=color), size=1)
gg3 + geom_text(aes(label=color), size=3)
gg3 + geom_text(aes(label=color, color=color), size=2)
gg2 + geom_text(aes(label=color, color=color), size=2)
gg + geom_text(aes(label=color, color=color), size=2)
gg + geom_text(aes(label=color, color=color), size=3)
gg + geom_text(aes(label=color, color=color), size=4)
gg + geom_text(aes(label=color, color=color), size=3)
library(grid)
my_grob = grobTree(textGrob("My Custom Text", x=0.1, y=0.9, gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
gg1 + annotation_custom(my_grob)
my_grob = grobTree(textGrob("My Custom Text", x=0.6, y=0.3, gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
gg3 + annotation_custom(my_grob)
my_grob = grobTree(textGrob("My Custom Text", x=0.7, y=0.3, gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
gg3 + annotation_custom(my_grob)
my_grob = grobTree(textGrob("My Custom Text", x=0.75, y=0.2, gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
my_grob = grobTree(textGrob("My Custom Text", x=0.8, y=0.2, gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
gg3 + annotation_custom(my_grob)
head(diamonds)
gg3 + facet_grid(clarity ~ cut)  # arrange in a grid. More space for plots.
gg3 + facet_wrap(clarity ~ cut, ncol=2)  # multiple plots
gg3 + facet_wrap(clarity ~ cut, ncol=5)  # multiple plots
gg1 + facet_wrap(clarity ~ cut, scales="free")  # free the x and y axis scales.
gg3 + facet_grid(color ~ cut)  # arrange in a grid. More space for plots.
gg3 + facet_grid(color ~ cut)  # arrange in a grid. More space for plots.
gg3 + facet_grid(color ~ cut)  # arrange in a grid. More space for plots.
gg1 + facet_wrap(color ~ cut, scales="free")  # free the x and y axis scales.
gg3 + facet_wrap(color ~ cut, ncol=5)  # multiple plots
gg3 + facet_wrap(color ~ cut, scales="free")  # free the x and y axis scales.
gg1 + facet_wrap(color ~ cut, scales="free")  # free the x and y axis scales.
p1 <- gg3 + annotation_custom(my_grob)
p1 <- gg3 + facet_grid(color ~ cut)  # arrange in a grid. More space for plots.
p2 <- gg1 + facet_wrap(color ~ cut, scales="free")  # free the x and y axis scales.
grid.arrange(p1, p2, ncol=2)
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
p1 <- gg1 + facet_grid(color ~ cut)  # arrange in a grid. More space for plots.
print(p1)
grid.arrange(p1, p2, ncol=2)
gg + geom_smooth(method="lm")  # method could be - 'lm', 'loess', 'gam'
gg3 + geom_smooth(method="lm")  # method could be - 'lm', 'loess', 'gam'
gg3
gg3 + geom_smooth(method="loess")  # method could be - 'lm', 'loess', 'gam'
gg3 + geom_smooth(method="loess")  # method could be - 'lm', 'loess', 'gam'
gg3 + geom_smooth(method="gam")  # method could be - 'lm', 'loess', 'gam'
gg3 + geom_smooth(method="lm")  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + labs(title="Plot Title", x="X-Axis", y="Y-Axis")
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + labs(title="Plot Title", x="X-Axis", y="Y-Axis") + geom_smooth(method="lm")  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + labs(title="Plot Title", x="X-Axis", y="Y-Axis") + geom_smooth(method="lm")  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + geom_smooth(method="lm")  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=color, y=price)) + geom_point(aes(color=color)) + geom_smooth(method="lm")  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth() # Adding scatterplot geom (layer1) and smoothing geom (layer2).
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + geom_smooth()  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + geom_smooth(color=color)  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + geom_smooth(aes(color=color))  # method could be - 'lm', 'loess', 'gam'
?geom_smooth
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + geom_smooth(aes(color=color), method="gam")  # method could be - 'lm', 'loess', 'gam'
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color)) + geom_smooth(aes(color=color))  # method could be - 'lm', 'loess', 'gam'
gg + geom_hline(yintercept=10)
gg3 + geom_hline(yintercept=10)
gg3 + geom_smooth(aes(color=color))
gg2 <- gg1 + labs(title="Diamonds", x="Carat", y="Price")
gg3 + geom_smooth(aes(color=color))
gg3 <- gg2 + theme(plot.title=element_text(size=25), axis.title.x=element_text(size=20), axis.title.y=element_text(size=20), axis.text.x=element_text(size=15), axis.text.y=element_text(size=15))
gg3 + geom_smooth(aes(color=color))
gg3 + geom_hline(yintercept=10)
gg3 + geom_hline(yintercept=5000, size=3)
gg3 + geom_hline(yintercept=5000, size=3)
gg3 + geom_vline(xintercept=4, size=3)
gg3 + geom_vline(xintercept=4, size=2, type="dashed")
gg3 + geom_vline(xintercept=4, size=2)
gg3 + geom_vline(xintercept=4, size=2, color="firebrick")
?geom_vline
counts <- as.data.frame(table(x = rpois(100,5)))
counts
counts$x <- as.numeric(as.character(counts$x))
counts
ggplot(counts, aes(x, Freq)) +
geom_segment(aes(xend = x, yend = 0), size = 10, lineend = "butt")
ggplot(counts, aes(x, Freq)) + geom_segment(aes(xend = x, yend = 0), size = 10, lineend = "butt")
ggplot(counts, aes(x, Freq)) + geom_segment(aes(xend = x, yend = 0), size = 10)
ggplot(counts, aes(x, Freq)) + geom_segment(aes(xend = x, yend = 0), size = 10, lineend = "round")
ggplot(counts, aes(x, Freq)) + geom_segment(aes(xend = x, yend = Freq), size = 10)
ggplot(counts, aes(x, Freq)) + geom_segment(aes(xend = 0, yend = 0), size = 10)
ggplot(counts, aes(x, Freq)) + geom_segment(aes(xend = 0, yend = 0), size = 5)
gg3 + geom_segment(aes(x=2, y=500, xend=x=2, yend=4000, size=2, color="firebrick", lineend="round"))
gg3 + geom_segment(aes(x=2, y=500, xend=2, yend=4000, size=2, color="firebrick", lineend="round"))
gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, color="firebrick", lineend="round"))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-2, size=2, lineend="round"))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-2, lineend="round"))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-2, lineend="butt"))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-200, lineend="butt"))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-200, lineend="butt", color=color))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-200, lineend="butt", color=color, size=2))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-200, lineend="butt", color=color, size=1))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-200, lineend="butt", color=color, size=1)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-500, lineend="butt", color=color, size=1)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-500, lineend="round", color=color, size=1)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-500, color=color, size=1)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-400, color=color, size=1)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-400, color=color, size=1)) + coord_cartesian(xlim=c(2, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-400, color=color, size=1)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-400, color=color)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-500, color=color)) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-800, color=color), size=2) + coord_cartesian(xlim=c(3, 5))
gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5))
gg <- ggplot(diamonds, aes(x=carat))
gg + geom_bar()  # frequency table
gg <- ggplot(diamonds, aes(x=color))
gg + geom_bar()  # frequency table
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar()  # frequency table
mtcars
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar()  # frequency table
df <- data.frame(var=c("a", "b", "c"), nums=c(1:3))
plot2 <- ggplot(df, aes(x=var, y=nums)) + geom_bar(stat = "identity")  # Y axis is explicit. 'stat=identity'
print(plot2)
head(mtcars)
gg <- ggplot(mtcars, aes(x=cyl, y=mpg))
gg + geom_bar(position="dodge", fill=vs)  # frequency table
gg + geom_bar(position="dodge", aes(fill=vs))  # frequency table
gg + geom_bar(stat="identity", position="dodge", aes(fill=vs))  # frequency table
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar()  # frequency table
gg + geom_bar(stat="identity", position="dodge", aes(fill=factor(vs)))  # frequency table
gg + geom_bar(stat="identity", position="dodge"
)
gg <- ggplot(mtcars, aes(x=cyl, y=mpg))
gg + geom_bar(stat="identity", position="dodge", aes(fill=factor(vs)))  # frequency table
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar(stat="identity", position="dodge", aes(fill=factor(vs)))  # frequency table
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar(position="dodge", aes(fill=factor(vs)))  # frequency table
gg + geom_bar(position="dodge", aes(fill=(vs)))  # frequency table
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar(position="dodge", aes(fill=(vs)))  # frequency table
gg + geom_bar(position="dodge", aes(fill=vs))  # frequency table
gg + geom_bar(position="dodge", aes(fill=factor(vs)))  # frequency table
gg + geom_bar(aes(fill=factor(vs)))  # frequency table
aggregate(mtcars$mpg, by=list(mtcars$cyl))
aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)
names(df) <- c("cyl", "mpg")
df <- aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)
names(df) <- c("cyl", "mpg")
head(df)
ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity")  # Y axis is explicit. 'stat=identity'
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity")  # Y axis is explicit. 'stat=identity'
print(gg_bar)
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar(position="dodge", aes(fill=factor(vs)))  # side-by-side
gg + geom_bar(aes(fill=factor(vs)))  # stacked
gg + geom_bar(stat="identity", aes(fill=colorVariable))
gg + geom_bar(stat="identity", aes(fill=cyl))
gg + geom_bar(aes(fill=cyl))
gg + geom_bar(aes(fill=cyl))
gg + geom_bar(aes(fill=cyl))
gg_bar + geom_bar(aes(fill=cyl))
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar(aes(fill=cyl))
gg + geom_bar(aes(color=cyl))
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity")  # Y axis is explicit. 'stat=identity'
print(gg_bar)
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
print(gg_bar)
gg_bar + scale_fill_manual(values=c("color1", "color2", "color3"))
gg_bar + scale_fill_manual(values=c("steelblue", "firebrick", "green"))
gg_bar
gg_bar <- ggplot(df, aes(x=factor(cyl), y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
print(gg_bar)
gg_bar + scale_fill_manual(values=c("steelblue", "firebrick", "green"))
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
print(gg_bar)
gg_bar + scale_fill_manual(values=c("steelblue", "firebrick", "green"))
gg_bar + scale_fill_continuous(values=c("steelblue", "firebrick", "green"))
gg_bar + scale_fill_manual(values=c('4'="steelblue", '6'="firebrick", '8'="green"))
gg_bar <- ggplot(df, aes(x=factor(cyl), y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
gg_bar + scale_fill_manual(values=c('4'="steelblue", '6'="firebrick", '8'="green"))
gg_bar + scale_fill_manual(values=c("4"="steelblue", "6"="firebrick", "8"="green"))
str(df)
df$cyl <- as.factor(df$cyl)
gg_bar <- ggplot(df, aes(x=factor(cyl), y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
gg_bar + scale_fill_manual(values=c("4"="steelblue", "6"="firebrick", "8"="green"))
df$cyl <- as.factor(df$cyl)
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
gg_bar + scale_fill_manual(values=c("4"="steelblue", "6"="firebrick", "8"="green"))
gg_bar + scale_fill_manual(values=c("4"="steelblue", "6"="firebrick", "8"="darkgreen"))
library(RColorBrewer)
display.brewer.all(n=20, exact.n=FALSE)  # display available color palettes
ggplot(mtcars, aes(x=cyl, y=carb, fill=factor(cyl))) + geom_bar(stat="identity") + scale_fill_brewer(palette="Reds")  # "Reds" is palette name
mtcars
aggregate(mtcars$carb, by=list(mtcars$cyl), FUN=sum)
gg3 + geom_hline(yintercept=5000, size=2)
gg3 + geom_hline(yintercept=5000, size=2, linetype="dotted")
gg3 + geom_hline(yintercept=5000, size=1, linetype="dotted", color="blue")
data("economics", package = ggplot2)
data("economics", package = "ggplot2")
ggplot(economics)
hEAD(ECONOMICS)
head(economics)
str(economics)
gg <- ggplot(economics, aes(x=Date))
gg + geom_line(aes(y=pcs),linetype='dotted', size=1, color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=pce),linetype='dotted', size=1, color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg <- ggplot(economics, aes(x=date))
gg + geom_line(aes(y=pce),linetype='dotted', size=1, color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=pce), size=1, color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=pce), color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=pce), size=2, color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=psavert), size=2, color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=2, color="firebrick")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=2, color="steelblue")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
library(reshape2)
df_melt <- melt(economics[, c("date", "psavert", "uempmed")], id="date")
head(df_melt)
gg <- ggplot(df_melt, aes(x=date))
gg <- ggplot(df_melt, aes(x=date))
gg + geom_line(aes(y=value, color=variable))  # dynamic size and color.
gg + geom_line(aes(y=value, color=variable), size=2)  # dynamic size and color.
gg + geom_line(aes(y=value, color=variable), size=1.5)  # dynamic size and color.
gg + geom_line(aes(y=value, color=variable), size=1)  # dynamic size and color.
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_continuous(name="")
gg + geom_line(aes(y=value, color=variable), size=1) + theme(legend.title="")
gg + geom_line(aes(y=value, color=variable), size=1) + theme(legend.title=element_blank())
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=2, color="steelblue", linetype="dotted")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg <- ggplot(economics, aes(x=date))
# Method 1:
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=2, color="steelblue", linetype="dotted")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=2, color="steelblue", linetype="dotdash")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=1, color="steelblue", linetype="dotdash")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=1, color="steelblue", linetype="twodash")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg <- ggplot(economics, aes(x=date))
# Method 1:
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=1, color="steelblue", linetype="twodash")  # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
# Method 2:
library(reshape2)
df_melt <- melt(economics[, c("date", "psavert", "uempmed")], id="date")
gg <- ggplot(df_melt, aes(x=date))
gg + geom_line(aes(y=value, color=variable), size=1)
gg + geom_line(aes(y=value, color=variable), size=1) + theme(legend.title=element_text("Legend"))
gg + geom_line(aes(y=value, color=variable), size=1)
gg + geom_line(aes(y=value, color=variable), size=1) + theme(legend.title=element_text(name="Legend"))
gg + geom_line(aes(y=value, color=variable), size=1) + theme(legend.title=element_text(name="Legend"))
gg + geom_line(aes(y=value, color=variable), size=1) + theme(legend.title=element_grob(name="Legend"))
gg + geom_line(aes(y=value, color=variable), size=1) + theme(legend.title=element_grob("Legend"))
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_discrete(name="Legend"))
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_continuous(name="Legend"))
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_continuous(name="Legend")
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_continuous(name="Legend")
str(df_melt)
gg <- ggplot(df_melt, aes(x=date))
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_continuous(name="Legend")
gg <- ggplot(df_melt, aes(x=date))
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_continuous(name="Legend")
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_discrete(name="Legend")
library(ggfortify)
autoplot(AirPassengers)
autoplot(AirPassengers, size=2)
autoplot(AirPassengers, size=2) + labs(title="AirPassengers")
AirPassengers
year(AirPassengers)
AirPassengers/2
attributes(AirPassengers)
frequency(AirPassengers)
names(AirPassengers)
unclass(AirPassengers)
?ts
start(AirPassengers)
tsp(AirPassengers)
cycle(AirPassengers)
class(cycle(AirPassengers))
name(cycle(AirPassengers))
names(cycle(AirPassengers))
as.data.frame(cycle(AirPassengers))
start(AirPassengers)[1]
end(AirPassengers)[1]
as.data.frame(cycle(AirPassengers))
as.numeric(cycle(AirPassengers))
start(AirPassengers)
st_month <- ifelse(nchar(start(AirPassengers)[2]) == 2, start(AirPassengers)[2], paste0("0", start(AirPassengers)[2])
st_month <- ifelse(nchar(start(AirPassengers)[2]) == 2, start(AirPassengers)[2], paste0("0", start(AirPassengers)[2]))
st_month
st_date <- date(st_year, st_month, 01)
st_date <- date(paste(st_year, st_month, "01", sep="-"))
paste(st_year, st_month, "01", sep="-")
st_year <- start(AirPassengers)[1]
st_month <- ifelse(nchar(start(AirPassengers)[2]) == 2, start(AirPassengers)[2], paste0("0", start(AirPassengers)[2]))
st_date <- date(paste(st_year, st_month, "01", sep="-"))
paste(st_year, st_month, "01", sep="-")
st_date <- date(paste(st_year, st_month, "01", sep="-"))
st_date <- as.date(paste(st_year, st_month, "01", sep="-"))
st_date <- as.Date(paste(st_year, st_month, "01", sep="-"))
st_date
seq.Date(st_date, length=length(AirPassengers))
seq.Date(st_date, length=length(AirPassengers), by="month")
st_year <- start(AirPassengers)[1]
st_month <- "01"
st_date <- as.Date(paste(st_year, st_month, "01", sep="-"))
seq.Date(st_date, length=length(AirPassengers), by="month")
st_year <- start(AirPassengers)[1]
st_month <- "01"
st_date <- as.Date(paste(st_year, st_month, "01", sep="-"))
dates <- seq.Date(st_date, length=length(AirPassengers), by="month")
dates
data.frame(dates, AirPassengers, AirPassengers/2)
df <- data.frame(dates, AirPassengers, AirPassengers/2)
head(df)
?geom_ribbon
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers))
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2))
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), color="green")
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=AirPassengers-50, ymax=AirPassengers+50)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers.2+20), fill="green")
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers-10, ymax=AirPassengers.2+10), fill="green")
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-10, ymax=AirPassengers.2+10), fill="green")
ggplot(df, aes(x=dates)) + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-20, ymax=AirPassengers.2+20), fill="green")
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30))
gg + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
gg + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-20, ymax=AirPassengers.2+20), fill="green")
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.title.y=element_text(size=20))
gg + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.text.x=element_text(size=20))
gg + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.text.x=element_text(size=15))
gg + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
```
```{r, eval=FALSE}
gg + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-20, ymax=AirPassengers.2+20), fill="green")
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.text.x=element_text(size=15))
head(df)
gg + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-20, ymax=AirPassengers.2+20), fill="green")
df <- data.frame(dates, AP=AirPassengers, AP2=AirPassengers/2)
gg + geom_ribbon(aes(ymin=0, ymax=AP)) + geom_ribbon(aes(ymin=0, ymax=AP2), fill="green")
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.text.x=element_text(size=15))
gg + geom_ribbon(aes(ymin=0, ymax=AP)) + geom_ribbon(aes(ymin=0, ymax=AP2), fill="green")
gg + geom_ribbon(aes(ymin=AP-20, ymax=AP+20)) + geom_ribbon(aes(ymin=AP2-20, ymax=AP2+20), fill="green")
str(df)
data.frame(AirPassengers)
matrix(AirPassengers)
gg <- ggplot(diamonds, aes(x=carat, y=price))
gg + geom_point()
library(ggplot2)
gg <- ggplot(diamonds, aes(x=carat, y=price))
gg + geom_point()
gg + geom_point(size=1, shape=1, color="steelblue", stroke=2)
gg + geom_point(aes(size=carat, shape=cut, color=color, stroke=carat))
gg1 <- gg + geom_point(aes(color=color))
gg2 <- gg1 + labs(title="Diamonds", x="Carat", y="Price")
print(gg2)
gg2 + theme(text=element_text(color="blue"))  # all text turns blue.
gg3 <- gg2 + theme(plot.title=element_text(size=25), axis.title.x=element_text(size=20), axis.title.y=element_text(size=20), axis.text.x=element_text(size=15), axis.text.y=element_text(size=15))
print(gg3)
gg3 + labs(title="Plot Title\nSecond Line of Plot Title") + theme(plot.title=element_text(face="bold", color="steelblue", lineheight=1.2))
gg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
gg3 + coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) + geom_smooth()  # zoom in
gg3 + xlim(c(0,3)) + ylim(c(0, 5000)) + geom_smooth()  # deletes the points
gg3 + scale_x_continuous(limits=c(0,3)) + scale_y_continuous(limits=c(0, 5000))  # deletes the points outside limits
gg3 + scale_x_continuous(limits=c(0,3)) + scale_y_continuous(limits=c(0, 5000)) + geom_smooth()# deletes the points outside limits
gg3 + scale_x_continuous(labels=c("zero", "one", "two", "three", "four", "five")) + scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor
gg3 + theme(axis.text.x=element_text(angle=45), axis.text.y=element_text(angle=45))
gg3 + coord_flip()  # flips X and Y axis.
gg3 + theme(legend.position="none")  # hides the legend
gg3 + scale_color_discrete(name="")  # Remove legend title (method1)
gg3 + theme(legend.title=element_blank())  # Remove legend title (method)
gg3 + scale_color_discrete(name="Diamonds")  # Change legend title
gg3 + scale_color_discrete(name="")  # Remove legend title (method1)
gg3 + scale_color_discrete(name="Diamonds")  # Change legend title
p1 <- gg3 + theme(legend.title=element_blank())  # Remove legend title (method)
p2 <- gg3 + scale_color_discrete(name="Diamonds")  # Change legend title
library(gridExtra)
p1 <- gg3 + theme(legend.title=element_blank())  # Remove legend title (method)
p2 <- gg3 + scale_color_discrete(name="Diamonds")  # Change legend title
library(gridExtra)
grid.arrange(p1, p2)
grid.arrange(p1, p2, ncol=2)
gg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
gg3 + theme(legend.position="top")  # top / bottom / left / right
p1 <- gg3 + theme(legend.position="top")  # top / bottom / left / right
p2 <- gg3 + theme(legend.justification=c(1,0), legend.position=c(1,0))  # legend justification is the anchor point on the legend, considering the bottom left of legend as (0,0)
gridExtra::grid.arrange(p1, p2, ncol=2)
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=2, shape=4, stroke=2)))
gg + geom_text(aes(label=color, color=color), size=3)
gg + geom_text(aes(label=color, color=color), size=4)
my_grob = grobTree(textGrob("My Custom Text", x=0.8, y=0.2, gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
gg3 + annotation_custom(my_grob)
p1 <- gg1 + facet_grid(color ~ cut)  # arrange in a grid. More space for plots.
p2 <- gg1 + facet_wrap(color ~ cut, scales="free")  # free the x and y axis scales.
p1 <- gg1 + facet_grid(color ~ cut)  # arrange in a grid. More space for plots.
p2 <- gg1 + facet_wrap(color ~ cut, scales="free")  # free the x and y axis scales.
grid.arrange(p1, p2, ncol=2)
gg3 + geom_smooth(aes(color=color))  # method could be - 'lm', 'loess', 'gam'
gg3 + geom_hline(yintercept=5000, size=1, linetype="dotted", color="blue") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
gg3 + geom_vline(xintercept=4, size=2, color="firebrick")
gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, lineend="round"))
gg3 + geom_hline(yintercept=5000, size=1, linetype="dotted", color="blue") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
p1 <- gg3 + geom_hline(yintercept=5000, size=2, linetype="dotted", color="blue") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
p2 <- gg3 + geom_vline(xintercept=4, size=2, color="firebrick")
p3 <- gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, lineend="round"))
p4 <- gg3 + geom_segment(aes(x=carat, y=price, xend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5))  # x, y: start points. xend, yend: end points
gridExtra::grid.arrange(p1,p2,p3,p4, ncol=4)
gridExtra::grid.arrange(p1,p2,p3,p4, ncol=2)
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar()  # frequency table
gg <- ggplot(mtcars, aes(x=cyl))
p1 <- gg + geom_bar(position="dodge", aes(fill=factor(vs)))  # side-by-side
p2 <- gg + geom_bar(aes(fill=factor(vs)))  # stacked
gridExtra::grid.arrange(p1, p2, ncol=2)
df <- aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)  # mean of mpg for every 'cyl'
names(df) <- c("cyl", "mpg")
head(df)
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity")  # Y axis is explicit. 'stat=identity'
print(gg_bar)
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
print(gg_bar)
df$cyl <- as.factor(df$cyl)
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
gg_bar + scale_fill_manual(values=c("4"="steelblue", "6"="firebrick", "8"="darkgreen"))
library(RColorBrewer)
display.brewer.all(n=20, exact.n=FALSE)  # display available color palettes
ggplot(mtcars, aes(x=cyl, y=carb, fill=factor(cyl))) + geom_bar(stat="identity") + scale_fill_brewer(palette="Reds")  # "Reds" is palette name
gg <- ggplot(economics, aes(x=date))  # setup
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=1, color="steelblue", linetype="twodash")  # No legend
df_melt <- melt(economics[, c("date", "psavert", "uempmed")], id="date")  # melt by date.
gg <- ggplot(df_melt, aes(x=date))  # setup
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_discrete(name="Legend")  # gets legend.
autoplot(AirPassengers, size=2) + labs(title="AirPassengers")
st_year <- start(AirPassengers)[1]
st_month <- "01"
st_date <- as.Date(paste(st_year, st_month, "01", sep="-"))
dates <- seq.Date(st_date, length=length(AirPassengers), by="month")
df <- data.frame(dates, AirPassengers, AirPassengers/2)
head(df)
#>        dates AirPassengers AirPassengers.2
#> 1 1949-01-01           112            56.0
#> 2 1949-02-01           118            59.0
#> 3 1949-03-01           132            66.0
#> 4 1949-04-01           129            64.5
#> 5 1949-05-01           121            60.5
#> 6 1949-06-01           135            67.5
# Plot ribbon with ymin=0
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.text.x=element_text(size=15))
gg + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
gg + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-20, ymax=AirPassengers.2+20), fill="green")
